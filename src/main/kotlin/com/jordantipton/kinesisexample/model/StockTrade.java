/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.jordantipton.kinesisexample.model;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class StockTrade extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6241969121140815511L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"StockTrade\",\"namespace\":\"com.jordantipton.kinesisexample.model\",\"fields\":[{\"name\":\"tickerSymbol\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tradeType\",\"type\":{\"type\":\"enum\",\"name\":\"TradeType\",\"symbols\":[\"BUY\",\"SELL\"]}},{\"name\":\"price\",\"type\":[\"double\",\"null\"]},{\"name\":\"quantity\",\"type\":[\"long\",\"null\"]},{\"name\":\"id\",\"type\":[\"long\",\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<StockTrade> ENCODER =
      new BinaryMessageEncoder<StockTrade>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<StockTrade> DECODER =
      new BinaryMessageDecoder<StockTrade>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<StockTrade> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<StockTrade> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<StockTrade>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this StockTrade to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a StockTrade from a ByteBuffer. */
  public static StockTrade fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.String tickerSymbol;
  @Deprecated public com.jordantipton.kinesisexample.model.TradeType tradeType;
  @Deprecated public java.lang.Double price;
  @Deprecated public java.lang.Long quantity;
  @Deprecated public java.lang.Long id;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public StockTrade() {}

  /**
   * All-args constructor.
   * @param tickerSymbol The new value for tickerSymbol
   * @param tradeType The new value for tradeType
   * @param price The new value for price
   * @param quantity The new value for quantity
   * @param id The new value for id
   */
  public StockTrade(java.lang.String tickerSymbol, com.jordantipton.kinesisexample.model.TradeType tradeType, java.lang.Double price, java.lang.Long quantity, java.lang.Long id) {
    this.tickerSymbol = tickerSymbol;
    this.tradeType = tradeType;
    this.price = price;
    this.quantity = quantity;
    this.id = id;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return tickerSymbol;
    case 1: return tradeType;
    case 2: return price;
    case 3: return quantity;
    case 4: return id;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: tickerSymbol = (java.lang.String)value$; break;
    case 1: tradeType = (com.jordantipton.kinesisexample.model.TradeType)value$; break;
    case 2: price = (java.lang.Double)value$; break;
    case 3: quantity = (java.lang.Long)value$; break;
    case 4: id = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'tickerSymbol' field.
   * @return The value of the 'tickerSymbol' field.
   */
  public java.lang.String getTickerSymbol() {
    return tickerSymbol;
  }

  /**
   * Sets the value of the 'tickerSymbol' field.
   * @param value the value to set.
   */
  public void setTickerSymbol(java.lang.String value) {
    this.tickerSymbol = value;
  }

  /**
   * Gets the value of the 'tradeType' field.
   * @return The value of the 'tradeType' field.
   */
  public com.jordantipton.kinesisexample.model.TradeType getTradeType() {
    return tradeType;
  }

  /**
   * Sets the value of the 'tradeType' field.
   * @param value the value to set.
   */
  public void setTradeType(com.jordantipton.kinesisexample.model.TradeType value) {
    this.tradeType = value;
  }

  /**
   * Gets the value of the 'price' field.
   * @return The value of the 'price' field.
   */
  public java.lang.Double getPrice() {
    return price;
  }

  /**
   * Sets the value of the 'price' field.
   * @param value the value to set.
   */
  public void setPrice(java.lang.Double value) {
    this.price = value;
  }

  /**
   * Gets the value of the 'quantity' field.
   * @return The value of the 'quantity' field.
   */
  public java.lang.Long getQuantity() {
    return quantity;
  }

  /**
   * Sets the value of the 'quantity' field.
   * @param value the value to set.
   */
  public void setQuantity(java.lang.Long value) {
    this.quantity = value;
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.Long getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.Long value) {
    this.id = value;
  }

  /**
   * Creates a new StockTrade RecordBuilder.
   * @return A new StockTrade RecordBuilder
   */
  public static com.jordantipton.kinesisexample.model.StockTrade.Builder newBuilder() {
    return new com.jordantipton.kinesisexample.model.StockTrade.Builder();
  }

  /**
   * Creates a new StockTrade RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new StockTrade RecordBuilder
   */
  public static com.jordantipton.kinesisexample.model.StockTrade.Builder newBuilder(com.jordantipton.kinesisexample.model.StockTrade.Builder other) {
    return new com.jordantipton.kinesisexample.model.StockTrade.Builder(other);
  }

  /**
   * Creates a new StockTrade RecordBuilder by copying an existing StockTrade instance.
   * @param other The existing instance to copy.
   * @return A new StockTrade RecordBuilder
   */
  public static com.jordantipton.kinesisexample.model.StockTrade.Builder newBuilder(com.jordantipton.kinesisexample.model.StockTrade other) {
    return new com.jordantipton.kinesisexample.model.StockTrade.Builder(other);
  }

  /**
   * RecordBuilder for StockTrade instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<StockTrade>
    implements org.apache.avro.data.RecordBuilder<StockTrade> {

    private java.lang.String tickerSymbol;
    private com.jordantipton.kinesisexample.model.TradeType tradeType;
    private java.lang.Double price;
    private java.lang.Long quantity;
    private java.lang.Long id;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.jordantipton.kinesisexample.model.StockTrade.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.tickerSymbol)) {
        this.tickerSymbol = data().deepCopy(fields()[0].schema(), other.tickerSymbol);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.tradeType)) {
        this.tradeType = data().deepCopy(fields()[1].schema(), other.tradeType);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.price)) {
        this.price = data().deepCopy(fields()[2].schema(), other.price);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.quantity)) {
        this.quantity = data().deepCopy(fields()[3].schema(), other.quantity);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.id)) {
        this.id = data().deepCopy(fields()[4].schema(), other.id);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing StockTrade instance
     * @param other The existing instance to copy.
     */
    private Builder(com.jordantipton.kinesisexample.model.StockTrade other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.tickerSymbol)) {
        this.tickerSymbol = data().deepCopy(fields()[0].schema(), other.tickerSymbol);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.tradeType)) {
        this.tradeType = data().deepCopy(fields()[1].schema(), other.tradeType);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.price)) {
        this.price = data().deepCopy(fields()[2].schema(), other.price);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.quantity)) {
        this.quantity = data().deepCopy(fields()[3].schema(), other.quantity);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.id)) {
        this.id = data().deepCopy(fields()[4].schema(), other.id);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'tickerSymbol' field.
      * @return The value.
      */
    public java.lang.String getTickerSymbol() {
      return tickerSymbol;
    }

    /**
      * Sets the value of the 'tickerSymbol' field.
      * @param value The value of 'tickerSymbol'.
      * @return This builder.
      */
    public com.jordantipton.kinesisexample.model.StockTrade.Builder setTickerSymbol(java.lang.String value) {
      validate(fields()[0], value);
      this.tickerSymbol = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'tickerSymbol' field has been set.
      * @return True if the 'tickerSymbol' field has been set, false otherwise.
      */
    public boolean hasTickerSymbol() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'tickerSymbol' field.
      * @return This builder.
      */
    public com.jordantipton.kinesisexample.model.StockTrade.Builder clearTickerSymbol() {
      tickerSymbol = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'tradeType' field.
      * @return The value.
      */
    public com.jordantipton.kinesisexample.model.TradeType getTradeType() {
      return tradeType;
    }

    /**
      * Sets the value of the 'tradeType' field.
      * @param value The value of 'tradeType'.
      * @return This builder.
      */
    public com.jordantipton.kinesisexample.model.StockTrade.Builder setTradeType(com.jordantipton.kinesisexample.model.TradeType value) {
      validate(fields()[1], value);
      this.tradeType = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'tradeType' field has been set.
      * @return True if the 'tradeType' field has been set, false otherwise.
      */
    public boolean hasTradeType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'tradeType' field.
      * @return This builder.
      */
    public com.jordantipton.kinesisexample.model.StockTrade.Builder clearTradeType() {
      tradeType = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'price' field.
      * @return The value.
      */
    public java.lang.Double getPrice() {
      return price;
    }

    /**
      * Sets the value of the 'price' field.
      * @param value The value of 'price'.
      * @return This builder.
      */
    public com.jordantipton.kinesisexample.model.StockTrade.Builder setPrice(java.lang.Double value) {
      validate(fields()[2], value);
      this.price = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'price' field has been set.
      * @return True if the 'price' field has been set, false otherwise.
      */
    public boolean hasPrice() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'price' field.
      * @return This builder.
      */
    public com.jordantipton.kinesisexample.model.StockTrade.Builder clearPrice() {
      price = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'quantity' field.
      * @return The value.
      */
    public java.lang.Long getQuantity() {
      return quantity;
    }

    /**
      * Sets the value of the 'quantity' field.
      * @param value The value of 'quantity'.
      * @return This builder.
      */
    public com.jordantipton.kinesisexample.model.StockTrade.Builder setQuantity(java.lang.Long value) {
      validate(fields()[3], value);
      this.quantity = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'quantity' field has been set.
      * @return True if the 'quantity' field has been set, false otherwise.
      */
    public boolean hasQuantity() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'quantity' field.
      * @return This builder.
      */
    public com.jordantipton.kinesisexample.model.StockTrade.Builder clearQuantity() {
      quantity = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.Long getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.jordantipton.kinesisexample.model.StockTrade.Builder setId(java.lang.Long value) {
      validate(fields()[4], value);
      this.id = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.jordantipton.kinesisexample.model.StockTrade.Builder clearId() {
      id = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public StockTrade build() {
      try {
        StockTrade record = new StockTrade();
        record.tickerSymbol = fieldSetFlags()[0] ? this.tickerSymbol : (java.lang.String) defaultValue(fields()[0]);
        record.tradeType = fieldSetFlags()[1] ? this.tradeType : (com.jordantipton.kinesisexample.model.TradeType) defaultValue(fields()[1]);
        record.price = fieldSetFlags()[2] ? this.price : (java.lang.Double) defaultValue(fields()[2]);
        record.quantity = fieldSetFlags()[3] ? this.quantity : (java.lang.Long) defaultValue(fields()[3]);
        record.id = fieldSetFlags()[4] ? this.id : (java.lang.Long) defaultValue(fields()[4]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<StockTrade>
    WRITER$ = (org.apache.avro.io.DatumWriter<StockTrade>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<StockTrade>
    READER$ = (org.apache.avro.io.DatumReader<StockTrade>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
